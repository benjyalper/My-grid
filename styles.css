/*fitst grid*/

.container {
    display: grid;
    height: 100vh;
    grid-template-rows: 1fr 1fr 1fr;
    grid-template-columns: 1fr 1fr;
    gap: 3px;
}

h1 {
    position: fixed;
}

.item1 {
    grid-area: 1 / 1 / 3 /1;
    background-color: lightblue;
    /*same as grid-row: 1 / 3; and grid-column: 1 / 1*/
}

.item2 {
    grid-area: 1 / 2 / 2 / 3;
    background-color: lightyellow;
}

.item3 {
    grid-area: 3 / 1 / 4 / 2;
    background-color: #ffd1c2;
}

.item4 {
    grid-area: 2 / 2 / 4 / 3;
    background-color: #c9fbff;
}

.space-container {
    display: flex;
    height: 20vh;
}

/*second grid*/

.container2 {
    display: grid;
    height: 100vh;
    background-color: #7da2ff;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-template-rows: 1fr 1fr 1fr 1fr;
    gap: 5px;
}

.item5 {
    grid-column: 1 / 2;
    background-color: lightyellow;
}

.item6 {
    grid-column: 2 / 4;
    background-color: #abffec;
}

.item7 {
    grid-column: 4 / 5;
    background-color: #ffc7a2;
}

.item8 {
    grid-column: 2 / 5;
    grid-row: 2;
    background-color: #fffdca;
}

.item9 {
    grid-column: 1;
    grid-row: 2;
    background-color: #abffec;
    opacity: 0.5;
}

.item10 {
    grid-column: 3 / 5;
    grid-row-start: 3;
    grid-row-end: 4;
    background-color: #d6ffde;
    opacity: 0.5;
}



.item12 {
    grid-column: 1 / 3;
    grid-row: 3 / 5;
    background-color: #8f7fff;
    z-index: 2;
}

.item13 {
    grid-column: 2;
    grid-row-start: 4;
    background-color: #fffec2;
}

.item14 {
    grid-column: 3;
    grid-row: 4;
    background-color: #f9ff8f;
}

.item15 {
    grid-column: 4;
    grid-row: 4;
    background-color: #d6ffde;
    opacity: 0.5;
}

.container3 {
    display: grid;
    grid-template: 1fr 1fr / 1fr 1fr;
    /*same as deviding to grid-template-rows and grid-template-rows*/

    height: 80vh;
    gap: 5px;
}

.container3>div {
    border-radius: 20px;
    background-color: pink;
}

/*auto is writen in grid-template-columns or rows and sets the size of the column to fit the entire width (in columns) or to fit to content (in rows). for example: ggrid-template-columns: 200px auto creates one column 200px wide and the second column will fill the rest of our container. grid-template-rows: 20px auto will have first row 20px heigh and the second row fit to content. the auto columns are responsive*/


.container4 {
    display: grid;
    grid-template: auto auto / auto auto;
    /*same as deviding to grid-template-rows and grid-template-rows*/
    height: 80vh;
    gap: 5px;
}

.container4>div {
    border-radius: 20px;
    background-color: #97ff69;
}

.container5 {
    display: grid;
    height: 80vh;
    /*grid-template-columns: repeat(2, 1fr);
     grid-template-rows: repeat(2, 1fr);*/
    grid-template: repeat(2, 1fr) / repeat(2, 1fr);
}

.container5>div {
    border-radius: 30px;
    background-color: #8e88ff;
}

.container6 {
    display: grid;
    height: 100vh;
    /*grid-template-columns: repeat(2, 1fr);
     grid-template-rows: repeat(2, 1fr);*/
    grid-template: repeat(3, 1fr) / repeat(6, 1fr);
    gap: 5px;
}

.container6>div {
    border-radius: 10px;
    background-color: #b6b3ea;
}

.item61 {
    grid-column: 2 / 3;
}

.item62 {
    grid-column: 3 / 5;
    background-color: pink;
}

.item63 {
    grid-column: 5 / 7;
}

.item64 {
    grid-area: 2 / 2 / 3 / 4;
}

.item65 {
    grid-area: 2 / 4 / 3 / 6;
}

.item66 {
    grid-area: 3 / 1 / 4 / 2;
}

.item67 {
    grid-area: 3 / 3 / 4 / 5;
}

.item68 {
    grid-area: 3 / 5 / 4 / 7;
    background-color: pink;
}

.flex-container6 {
    grid-row: 1 / 4;
    grid-column: 1;
    background-color: #008002;
    display: flex;
    flex-direction: column;
    gap: 10px;
    padding: 5px;
}

.flex-item6 {
    flex: 1;
    border: 2px solid white;
    border-radius: 5px;
    background-color: pink;


}

.container7 {
    display: grid;
    height: 100vh;
    grid-template: repeat(3, 1fr) / repeat(3, 1fr);
    background-color: lightblue;
    gap: 10px;
}

.container7>div {
    border-radius: 10px
}

.item71 {
    grid-column: 1 / 3;
    grid-row: 1;
    background-color: pink;
}


.item72 {
    grid-column: 3 / 4;
    grid-row: 1;
    background-color: #fffe61;
}

.item73 {
    grid-column: 2 / 4;
    grid-row: 2;
    background-color: #e8f9cd;
    height: 50%;
    /*reduced height of this grid item to 50%*/
    align-self: center;
    /*centered grid item after reducing height*/
    /*the lines below act as the flex parent of class flexBox*/
    display: flex;
    align-items: center;
    justify-content: center;
}

.flexBox {
    display: flex;
    height: 33%;
    /*33% of parent (item73 that is set to display: flex;)*/
    width: 90%;
    /*90% of parent. could also be written- flex: 0.9; */
    gap: 5px;
    /*sets gaps between children*/

}


.flex-item {
    background-color: #7bffb2;
    border-radius: 10px;
    flex: 1;
    /*sets default size of children*/
}

.first {
    background-color: #aeeace;
    /*overides color set in parent*/
}

.second {
    flex: 3;
    /*overides size set in parent*/
    background-color: #eaaed1;
    /*overides color set in parent*/
}

.third {
    flex: 2;
    /*overides size set in parent*/
}




.item74 {
    grid-area: 2 / 1 / 3 / 2;
    background-color: #c9c4ff;
}

.item75 {
    grid-area: 3 / 1 / 4 / 3;
    background-color: #ffe9a9;
}

.item76 {
    grid-area: 3 / 3 / 4 / 4;
    background-color: #c9c4ff;
}

.container8 {
    display: flex;
    /*if display: flex; width is 100%*/
    background-color: deeppink;
    height: 300px;
    /*if no height: default is the content in html. with no content there will not be any height*/
    gap: 10px;
}

.container8>* {
    flex-basis: 5rem;
    /*alternatively we can use flex: number; to determine width*/
    background-color: lightblue;
    height: 80px;

}

.container9 {
    display: grid;
    grid-template-columns: 1fr 1fr;
    /*grid-template-rows: 1fr 1fr;*/
    height: 100vh;
    background-color: #ccffbb;
    gap: 5px;
}

.grid9Item {
    border: 3px solid black;
    background-color: #007ab1;
}

.snake {
    display: grid;
    grid-template: 1fr 1fr 1fr / 1fr 1fr 1fr;
    height: 100vh;
}

.snakeItem1 {
    grid-area: 1 / 1 / 2 / 3;
    background-color: #00c0fb;
    border-radius: 10px;
}

.snakeItem2 {
    grid-area: 1 / 2 / 4 / 3;
    background-color: #00c0fb;
    border-radius: 10px;
}

.snakeItem3 {
    grid-area: 3 / 2 / 4 / 4;
    background-color: #00c0fb;
    border-radius: 10px;
}

.snakeItem4 {
    grid-area: 1 / 3 / 2 / 4;
    background-color: #c6c600;
    border-radius: 50px;
}

.snakeItem5 {
    grid-area: 3 / 1 / 4 / 2;
    background-color: #c6c600;
    border-radius: 50px;
}




.flex-container9 {
    display: flex;
    flex-direction: column;
    width: 50px;
    height: 80vh;
    border-radius: 10px;
    background-color: #e991ff;
    justify-content: space-around;
}

.flex-container9>* {
    height: 20vh;
    background-color: lightblue;
    border-radius: 10px;

}

.flex-container10 {
    display: flex;
    flex-direction: row;
    /*row is also default direction*/
    border-radius: 10px;
    height: 10vh;
    background-color: #c095c9;
    justify-content: space-around;
    gap: 10px;
    /*if gap is set on items it wont appear.*/
    padding: 5px;
    /*same for padding*/
    flex-wrap: wrap;
    /*this wrap will not an effect if all items are set to flex:1; with no flex-basis*/
}

.flex-container10>* {
    background-color: lightblue;
    border-radius: 10px;
}

.flex-item10 {
    flex: 1;
    /*1 is a ratio meaning that it is relative to the other items. here there are 3. its also shorthand for flex-grow: 1; flex-shrink: 1; and flex-basis: 0;*/
    /* flex-basis: 500px; */
}

.flex-item11 {
    flex: 4;
    /* flex-basis: 400px; */
    /*flex-basis: 400px overides flex: 1*/
    /*this is twice the size of items with flex: 1;*/
    /*if other items width is not defined this items width of flex:2; will fill the width of the container, and flex:1, 2, 3, 5, etc. would do the same(fill the whole width)*/
    /* flex-basis: 100px; */
}

.flex-item12 {
    flex: 3;
    /* padding: 30px; */
    /*this padding doesnt appear or behaves strangely. only padding defined in the container will appear*/
    /* flex-basis: 100px; */
}

.flex-item13 {
    flex: 5;
}

.flex-item14 {
    flex: 2;
}